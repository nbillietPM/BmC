import numpy as np
import rasterio
from rasterio.mask import mask
import shapely
from rasterio.env import Env

def generate_transform_coordinates(subset, transform, format="array"):
    """
    A function that generates coordinate arrays for the raster defined by the affine transform

    Args
        subset (np.array): A 2D numpy array that contains the raster where the relevant information is stored in
        transform (affine.Affine): The affine transformation matrix that is characteristic for the subset
        format (str, optional): Option to output format. Standard format is array (1D) format, alternative is matrix output.
    Returns
        longitudes, latitudes (np.array): coordinate arrays that have a similar dimension to the original subset array. Each cell is characterized by a longitude and latitude pair
    """
    #Extract subset array dimensions to determine grid dimensions
    height, width = subset.shape
    #Generate meshgrid to assign index to each pixel
    rows, cols = np.meshgrid(np.arange(height), np.arange(width), indexing="ij")
    #Generate (lat, long) pairs based on the affine transform of the window ordered according to the generated indices
    longitudes, latitudes = rasterio.transform.xy(transform, rows, cols)
    if format=="array":
        return longitudes[:width], latitudes[::width]
    elif format=="matrix":
        return longitudes.reshape(height, width), latitudes.reshape(height, width)


def read_bounding_box(url, bbox, generate_coordinates=True):
    """
    A function that reads a subset defined by a bounding box from a cloud hosted tif file and returns the data within to the local user

    Args
        url (str): A URL that point to a cloud optimized tif file. This function is written with URL's generated by the `format_url_month_ts` function in mind.
        bbox (tuple<float>): a bounding box defined in the standard 
    Returns
        subset (np.ndarray): An array counting the measurements within the the bounding box

         If generate_coordinates is True, also returns:
            longitude (np.ndarray): Longitude grid matching the subset shape.
            latitude (np.ndarray): Latitude grid matching the subset shape.
    """
    if url==0:
        return 0
    with Env(GTIFF_SRS_SOURCE="EPSG"):
        with rasterio.open(url) as src_file:
            #Define a window that will be used to sample the region of interest
            #Transform describes the affine transformation matrix that defines the raster that is being used
            window = rasterio.windows.from_bounds(*bbox, transform=src_file.transform)
            #Read the first band of the tif file. Files are single band
            subset = src_file.read(1, window=window)
    if generate_coordinates:
        window_transform = src_file.window_transform(window)
        longitudes, latitudes = generate_transform_coordinates(subset, window_transform)
        return longitudes, latitudes, subset
    else:
        return subset

def read_polygon_area(url, shp_file, shp_path="", generate_coordinates=True):
    """
    A function that reads all data contained within the boundary of a polygon defined by a shapefile

    Args
        url (str): A URL that point to a cloud optimized tif file. This function is written with URL's generated by the `format_url_month_ts` function in mind.
        shp_file (str): Filename of the shapefile that contains the the polygon that describes the area of interest
        shp_path (str, optional): Directory where the shapefile is stored
        generate_coordinates (bool, optional): Option to generate coordinate raster associated with the subset
    Returns
        subset (np.array): An array counting the measurements within the polygon. Values outside the polygon is set to a negative value.
        
        If generate_coordinates is True, also returns:
            longitude (np.ndarray): Longitude grid matching the subset shape.
            latitude (np.ndarray): Latitude grid matching the subset shape.
    """
    if url==0:
        return 0
    #Read the shapefile 
    polygon = gpd.read_file(os.path.join(shp_path, shp_file))
    with Env(GTIFF_SRS_SOURCE="EPSG"):
        with rasterio.open(url) as src:
            #Convert the polygon to the CRS used within the src file
            polygon = polygon.to_crs(src.crs)
            #Mask out the polygon of interest and crop it out of the image
            out_img, out_transform = mask(src, polygon.geometry.apply(shapely.geometry.mapping), crop=True)
        #Returned array is 3D where the first axis is the number of bands. The tif files contain a single band in this case so this dimension can be dropped
    subset = out_img[0]
    if generate_coordinates:
        longitudes, latitudes = generate_transform_coordinates(subset, out_transform)
        return longitudes, latitudes, subset
    else:
        return subset